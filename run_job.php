<?php
/**
 * This script is designed to be run as a cron job.
 * It performs two main tasks:
 * 1. Executes a Python script to collect and process data for a specific year.
 * 2. Copies the generated data files to the website's directory, replacing existing files.
 */

// --- Configuration ---
// Use __DIR__ to make paths relative to this script's location, which is robust for cron jobs.
$basePath = __DIR__;
$year = '2025';

// Path to the Python executable. Use 'python3' or the full path (e.g., '/usr/bin/python3') if needed.
$pythonExecutable = 'python';

// Path to the Python script to be executed.
$pythonScriptPath = $basePath . DIRECTORY_SEPARATOR . 'DataCollector' . DIRECTORY_SEPARATOR . 'main.py';

// Source directory for the data generated by the Python script.
$sourceDataDir = $basePath . DIRECTORY_SEPARATOR . 'DataCollector' . DIRECTORY_SEPARATOR . $year;

// Destination directory within the website folder.
$destinationDir = $basePath . DIRECTORY_SEPARATOR . 'Website' . DIRECTORY_SEPARATOR . $year;

// --- Script Execution ---

// Set header to plain text for clean output in logs or terminal.
header('Content-Type: text/plain; charset=utf-8');

echo "==================================================\n";
echo "MLS'96 Cup Data Job started at: " . date('Y-m-d H:i:s') . "\n";
echo "==================================================\n\n";

// --- Step 1: Run the Python Data Collector Script ---
echo "STEP 1: Executing Python data collector...\n";
echo "COMMAND: $pythonExecutable $pythonScriptPath $year\n";

// Ensure the python script exists before trying to run it.
if (!is_file($pythonScriptPath)) {
    echo "\nFATAL ERROR: Python script not found at '$pythonScriptPath'.\n";
    exit(1);
}

$command = escapeshellcmd("$pythonExecutable $pythonScriptPath $year");
$output = [];
$return_var = -1;

// Execute the command
exec($command, $output, $return_var);

// A return code of 0 means success. Any other value indicates an error.
if ($return_var !== 0) {
    echo "\n--- PYTHON SCRIPT FAILED ---\n";
    echo "Return Code: $return_var\n";
    echo "Output:\n";
    echo implode("\n", $output);
    echo "\n----------------------------\n";
    echo "Job aborted due to script failure.\n";
    exit(1);
}

echo "Python script executed successfully.\n";
echo "----------------------------------------\n\n";


// --- Step 2: Copy Generated Data to Website Directory ---
echo "STEP 2: Copying data folder to website directory...\n";
echo "FROM: $sourceDataDir\n";
echo "TO:   $destinationDir\n";

// Check if the source directory was created by the python script.
if (!is_dir($sourceDataDir)) {
    echo "\nFATAL ERROR: Source directory '$sourceDataDir' was not found after script execution.\n";
    echo "Job aborted.\n";
    exit(1);
}

// Perform the recursive copy.
if (recursive_copy($sourceDataDir, $destinationDir)) {
    echo "Successfully copied files and folders.\n";
} else {
    echo "\nFATAL ERROR: File copy operation failed.\n";
    echo "Job aborted.\n";
    exit(1);
}

echo "----------------------------------------\n\n";
echo "Job finished successfully at: " . date('Y-m-d H:i:s') . "\n";
echo "==================================================\n";

exit(0);

/**
 * Recursively copies a directory and its contents, overwriting existing files.
 *
 * @param string $src The source directory path.
 * @param string $dst The destination directory path.
 * @return bool True on success, false on failure.
 */
function recursive_copy(string $src, string $dst): bool {
    if (!is_dir($src)) {
        echo "Error: Source path is not a directory: $src\n";
        return false;
    }

    if (!is_dir($dst) && !mkdir($dst, 0755, true)) {
        echo "Error: Unable to create destination directory: $dst\n";
        return false;
    }

    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($src, RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );

    foreach ($iterator as $item) {
        $destPath = $dst . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
        if ($item->isDir()) {
            if (!is_dir($destPath) && !mkdir($destPath)) return false;
        } elseif (!copy($item, $destPath)) {
            return false;
        }
    }
    return true;
}